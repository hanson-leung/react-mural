var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { jsx as _jsx } from "react/jsx-runtime";
import { useState, useEffect, useRef, useCallback } from 'react';
import { defer, startDragHandler } from './utils';
import { OVERLAY_CLASS_NAME, CLASS_NAME } from './constants';
const PortalBody = ({ children, isOpen, close, allowClickOutside, draggable }) => {
    const [overlayClass, setOverlayClass] = useState(OVERLAY_CLASS_NAME.BASE);
    const [modalClass, setModalClass] = useState(CLASS_NAME.BASE);
    const modalRef = useRef(null);
    const overlayClickHandler = useCallback(({ target }) => {
        var _a;
        if (((_a = modalRef.current) === null || _a === void 0 ? void 0 : _a.contains(target)) || !allowClickOutside)
            return;
        close();
    }, []);
    const modalDragHandler = useCallback((e) => {
        if (!draggable)
            return;
        startDragHandler(e);
    }, []);
    useEffect(() => {
        (() => __awaiter(void 0, void 0, void 0, function* () {
            if (isOpen) {
                yield defer(30);
                setOverlayClass((overlayClass) => `${overlayClass} ${OVERLAY_CLASS_NAME.AFTER_OPEN}`);
                setModalClass((modalClass) => `${modalClass} ${CLASS_NAME.AFTER_OPEN}`);
            }
            else {
                setOverlayClass((overlayClass) => `${overlayClass} ${OVERLAY_CLASS_NAME.BEFORE_CLOSE}`);
                setModalClass((modalClass) => `${modalClass} ${CLASS_NAME.BEFORE_CLOSE}`);
            }
        }))();
    }, [isOpen]);
    return (_jsx("div", Object.assign({ className: overlayClass, onClick: overlayClickHandler }, { children: _jsx("div", Object.assign({ className: modalClass, onMouseDown: modalDragHandler, ref: modalRef }, { children: _jsx("div", { children: children }, void 0) }), void 0) }), void 0));
};
export default PortalBody;
