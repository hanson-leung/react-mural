var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { jsx as _jsx } from "react/jsx-runtime";
import * as ReactDOM from 'react-dom';
import { useState, useEffect } from 'react';
import PortalBody from './PortalBody';
import Spinner from './Spinner';
import { PREFIX } from './constants';
import { $, defer } from './utils';
const Portal = ({ children, id, hashId, modalSet, initialization, pending, isOpen, close, allowClickOutside, duration, modalStyle, spinner, spinnerColor, draggable, }) => {
    const [isCreatedPortal, setCreatedPortal] = useState(false);
    useEffect(() => {
        (() => __awaiter(void 0, void 0, void 0, function* () {
            if (!isOpen) {
                yield defer(duration);
                const portal = $(`.${PREFIX.PORTAL}${hashId}`);
                const style = $(`[data-modal-style="${PREFIX.PORTAL}${hashId}`);
                portal === null || portal === void 0 ? void 0 : portal.remove();
                style === null || style === void 0 ? void 0 : style.remove();
                return setCreatedPortal(false);
            }
            const portal = document.createElement('div');
            portal.classList.add(`${PREFIX.PORTAL}${hashId}`);
            body.appendChild(portal);
            const style = document.createElement('style');
            style.setAttribute('data-modal-style', `${PREFIX.PORTAL}${hashId}`);
            style.textContent = modalStyle;
            head.appendChild(style);
            setCreatedPortal(true);
        }))();
    }, [isOpen]);
    useEffect(() => {
        if (!initialization || isOpen)
            return;
        modalSet.delete(id);
    }, [isOpen]);
    if (!isCreatedPortal || !initialization)
        return null;
    if (pending)
        return _jsx(Spinner, { spinner: spinner, spinnerColor: spinnerColor }, void 0);
    return ReactDOM.createPortal(_jsx(PortalBody, Object.assign({ isOpen: isOpen, close: close, allowClickOutside: allowClickOutside, draggable: draggable }, { children: children }), void 0), $(`.${PREFIX.PORTAL}${hashId}`));
};
const body = document.body;
const head = document.head;
export default Portal;
