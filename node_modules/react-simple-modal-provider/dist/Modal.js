var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useCallback, useEffect, useMemo } from 'react';
import { createModalContext } from './modalContext';
import { modalAnimation } from './modalAnimation';
import { checkRequiredProps, checkCustomStyle, hash, getModalStyle, checkPropsCondition } from './utils';
import Portal from './Portal';
const Modal = ({ children, id, consumer, isOpen, setOpen, allowClickOutside = true, duration = 0, overlayColor = 'rgba(0, 0, 0, 0.6)', animation = { type: '', base: '', before: '', after: '' }, vertical = 0, horizontal = 0, width = 0, height = 0, radius = 0, backgroundColor = 'transparent', asyncOpen, spinner, spinnerColor = 'rgba(45, 52, 54, 0.6)', draggable = false, }) => {
    duration = (animation === null || animation === void 0 ? void 0 : animation.type) && !duration ? 150 : duration;
    if (draggable && animation.type.match(/top|bottom|left|right/))
        animation = modalAnimation.scaleUp;
    useEffect(() => {
        checkRequiredProps({ id, consumer, isOpen, setOpen });
        checkCustomStyle({ id, width, height, backgroundColor });
    }, []);
    const hashId = hash(id);
    const [Context, ContextProps] = useMemo(() => createModalContext(id), []);
    const [initialization, setInitialization] = useState(false);
    const [pending, setPending] = useState(false);
    const [customProps, setCustomProps] = useState({});
    const setCustomPropsWithCheckPropsCondition = useCallback((props) => {
        if (checkPropsCondition(props))
            return setCustomProps(props);
        setCustomProps({});
    }, [customProps]);
    const open = useCallback((props) => __awaiter(void 0, void 0, void 0, function* () {
        setOpen(true);
        setCustomPropsWithCheckPropsCondition(props);
        if (!initialization)
            setInitialization(true);
        if (!asyncOpen)
            return;
        setPending(true);
        yield asyncOpen();
        setPending(false);
    }), [customProps]);
    const close = useCallback(() => setOpen(false), []);
    const keyUpHandler = useCallback(({ key }) => {
        if (key !== 'Escape')
            return;
        if ([...modalSet][modalSet.size - 1] !== id)
            return;
        close();
    }, []);
    useEffect(() => {
        if (!isOpen)
            return window.removeEventListener('keyup', keyUpHandler);
        window.addEventListener('keyup', keyUpHandler);
        modalSet.add(id);
    }, [isOpen]);
    const providerValues = useMemo(() => ({
        open,
        close,
    }), []);
    const propsProviderValues = useMemo(() => (Object.assign({}, customProps)), [customProps]);
    return (_jsx(ContextProps.Provider, Object.assign({ value: propsProviderValues }, { children: _jsxs(Context.Provider, Object.assign({ value: providerValues }, { children: [consumer,
                _jsx(Portal, Object.assign({ id: id, hashId: hashId, modalSet: modalSet, initialization: initialization, pending: pending, isOpen: isOpen, close: close, allowClickOutside: allowClickOutside, spinner: spinner, spinnerColor: spinnerColor, duration: duration, modalStyle: getModalStyle({
                        hashId,
                        duration,
                        overlayColor,
                        vertical,
                        horizontal,
                        animation,
                        width,
                        height,
                        radius,
                        backgroundColor,
                    }), draggable: draggable }, { children: children }), void 0)] }), void 0) }), void 0));
};
const modalSet = new Set();
export default Modal;
