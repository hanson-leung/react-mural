{"ast":null,"code":"var _jsxFileName = \"/Users/hdewey/Documents/repos/IYA/react-mural/src/components/Cards/Scan/Scanner.js\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Html5QrcodeScannerPlugin extends React.Component {\n  componentDidMount() {\n    // Creates the configuration object for Html5QrcodeScanner.\n    function createConfig(props) {\n      var config = {};\n\n      if (props.fps) {\n        config.fps = props.fps;\n      }\n\n      if (props.qrbox) {\n        config.qrbox = props.qrbox;\n      }\n\n      if (props.aspectRatio) {\n        config.aspectRatio = props.aspectRatio;\n      }\n\n      if (props.disableFlip !== undefined) {\n        config.disableFlip = props.disableFlip;\n      }\n\n      return config;\n    }\n\n    var config = createConfig(this.props);\n    var verbose = this.props.verbose === true; // Suceess callback is required.\n\n    if (!this.props.qrCodeSuccessCallback) {\n      throw 'qrCodeSuccessCallback is required callback.';\n    }\n\n    this.html5QrcodeScanner = new Html5QrcodeScanner('qr-code-full-region', config, verbose);\n    this.html5QrcodeScanner.render(this.props.qrCodeSuccessCallback, this.props.qrCodeErrorCallback);\n  }\n\n  componentWillUnmount() {\n    // TODO(mebjas): See if there is a better way to handle\n    //  promise in `componentWillUnmount`.\n    this.html5QrcodeScanner.clear().catch(error => {\n      console.error('Failed to clear html5QrcodeScanner. ', error);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: 'qr-code-full-region'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 14\n    }, this);\n  }\n\n} // this will be all QR code shit\n\n\nconst scan = async scanner => {\n  const qrCodeSuccessCallback = (decodedText, decodedResult) => {\n    console.log(decodedResult, decodedText);\n    const predictionTitle = document.getElementById(\"prediction-title\");\n    predictionTitle.innerHTML = decodedText;\n  };\n\n  const config = {\n    fps: 10,\n    qrbox: {\n      width: 200,\n      height: 200\n    }\n  }; // Select back camera or fail with `OverconstrainedError`.\n\n  scanner.start({\n    facingMode: {\n      exact: \"environment\"\n    }\n  }, config, qrCodeSuccessCallback);\n};\n\nconst Scanner = () => {\n  const html5QrCode = new Html5Qrcode(\"videoStream\");\n\n  const beginScan = () => {\n    console.log('scan beginning');\n    scan(html5QrCode);\n  }; // set video variable\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Html5QrcodeScannerPlugin, {\n      fps: 10,\n      qrbox: 250,\n      disableFlip: false,\n      qrCodeSuccessCallback: console.log,\n      qrCodeErrorCallback: console.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"scan-button\",\n      onClick: beginScan,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Scan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Scanner;\nexport default Scanner;\n\nvar _c;\n\n$RefreshReg$(_c, \"Scanner\");","map":{"version":3,"sources":["/Users/hdewey/Documents/repos/IYA/react-mural/src/components/Cards/Scan/Scanner.js"],"names":["React","useState","Html5QrcodeScannerPlugin","Component","componentDidMount","createConfig","props","config","fps","qrbox","aspectRatio","disableFlip","undefined","verbose","qrCodeSuccessCallback","html5QrcodeScanner","Html5QrcodeScanner","render","qrCodeErrorCallback","componentWillUnmount","clear","catch","error","console","scan","scanner","decodedText","decodedResult","log","predictionTitle","document","getElementById","innerHTML","width","height","start","facingMode","exact","Scanner","html5QrCode","Html5Qrcode","beginScan"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nclass Html5QrcodeScannerPlugin extends React.Component {\n  componentDidMount() {\n      // Creates the configuration object for Html5QrcodeScanner.\n      function createConfig(props) {\n          var config = {};\n          if (props.fps) {\n          config.fps = props.fps;\n          }\n          if (props.qrbox) {\n          config.qrbox = props.qrbox;\n          }\n          if (props.aspectRatio) {\n          config.aspectRatio = props.aspectRatio;\n          }\n          if (props.disableFlip !== undefined) {\n          config.disableFlip = props.disableFlip;\n          }\n          return config;\n      }\n\n      var config = createConfig(this.props);\n      var verbose = this.props.verbose === true;\n\n      // Suceess callback is required.\n      if (!(this.props.qrCodeSuccessCallback )) {\n          throw 'qrCodeSuccessCallback is required callback.';\n      }\n\n      this.html5QrcodeScanner = new Html5QrcodeScanner(\n          'qr-code-full-region', config, verbose);\n      this.html5QrcodeScanner.render(\n          this.props.qrCodeSuccessCallback, this.props.qrCodeErrorCallback);\n  }\n\n  componentWillUnmount() {\n      // TODO(mebjas): See if there is a better way to handle\n      //  promise in `componentWillUnmount`.\n      this.html5QrcodeScanner.clear().catch(error => {\n          console.error('Failed to clear html5QrcodeScanner. ', error);\n      });\n  }\n\n  render() {\n      return <div id={'qr-code-full-region'} />;\n  }\n}\n\n// this will be all QR code shit\nconst scan = async (scanner) => {\n  const qrCodeSuccessCallback = (decodedText, decodedResult) => {\n    console.log(decodedResult, decodedText);\n\n    const predictionTitle = document.getElementById(\"prediction-title\");\n  \n    predictionTitle.innerHTML = decodedText;\n  };\n  const config = { fps: 10, qrbox: { width: 200, height: 200 } };\n\n  // Select back camera or fail with `OverconstrainedError`.\n  scanner.start({ facingMode: { exact: \"environment\"} }, config, qrCodeSuccessCallback);\n}\n\nconst Scanner = () => {\n\n  const html5QrCode = new Html5Qrcode(\"videoStream\");\n\n  const beginScan = () => {\n    console.log('scan beginning');\n    scan(html5QrCode);\n  }\n  // set video variable\n\n  return (\n    <div>\n      <Html5QrcodeScannerPlugin\n            fps={10}\n            qrbox={250}\n            disableFlip={false}\n            qrCodeSuccessCallback={console.log}\n            qrCodeErrorCallback={console.error} />\n\n      <div id=\"scan-button\" onClick={beginScan}>\n          <h2>Scan</h2>\n      </div>\n\n    </div>\n  )\n}\n\nexport default Scanner;"]},"metadata":{},"sourceType":"module"}